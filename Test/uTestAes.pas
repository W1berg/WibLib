// Copyright (C) 2023 Pontus Wiberg <wiberg.public@outlook.com>
// Licensed under GPLv2 or later version. Contact for any licensing concerns

unit uTestAes;

interface

uses
  uTypes,
  uTest;

type
  TTestAes = class(TTest)
  private
    procedure AesRun(AAes: IAes; const AIn: TBytes; const AOut: TBytes = nil; const AWithMac: Boolean = True);

  public
    procedure CorrectConst;
    procedure InEquOut;
    procedure Vectors;
  end;

implementation

uses
  uAes;

type
  TAesModeRec = record
    Mode: TAesMode;
    Keys, IVs, Inputs, Outputs: TArray<string>;
  end;

const
  cVectors: array [TAesMode] of TAesModeRec = (

    (Mode: amCbcNoPad; //
    Keys: [
    // 128
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C',
    // 192
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
    // 256
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4'];

    IVs: [
    // 128
    '000102030405060708090A0B0C0D0E0F', '7649ABAC8119B246CEE98E9B12E9197D', '5086CB9B507219EE95DB113A917678B2', '73BED6B8E3C1743B7116E69E22229516',
    // 192
    '000102030405060708090A0B0C0D0E0F', '4F021DB243BC633D7178183A9FA071E8', 'B4D9ADA9AD7DEDF4E5E738763F69145A', '571B242012FB7AE07FA9BAAC3DF102E0',
    // 256
    '000102030405060708090A0B0C0D0E0F', 'F58C4C04D6E5F1BA779EABFB5F7BFBD6', '9CFC4E967EDB808D679F777BC6702C7D', '39F23369A9D9BACFA530E26304231461'];

    Inputs: [
    // 128
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 192
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 256
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710'];

    Outputs: [
    // 128
    '7649ABAC8119B246CEE98E9B12E9197D', '5086CB9B507219EE95DB113A917678B2', '73BED6B8E3C1743B7116E69E22229516', '3FF1CAA1681FAC09120ECA307586E1A7',
    // 192
    '4F021DB243BC633D7178183A9FA071E8', 'B4D9ADA9AD7DEDF4E5E738763F69145A', '571B242012FB7AE07FA9BAAC3DF102E0', '08B0E27988598881D920A9E64F5615CD',
    // 256
    'F58C4C04D6E5F1BA779EABFB5F7BFBD6', '9CFC4E967EDB808D679F777BC6702C7D', '39F23369A9D9BACFA530E26304231461', 'B2EB05E2C39BE9FCDA6C19078C6A9D1B'];

    ),

    (Mode: amCbcPkcs7; //
    Keys: [
    // 128
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C',
    // 192
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B',
    // 256
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4'];

    IVs: [
    // 128
    '000102030405060708090A0B0C0D0E0F', '7649ABAC8119B246CEE98E9B12E9197D', '5086CB9B507219EE95DB113A917678B2', '73BED6B8E3C1743B7116E69E22229516',
    // 192
    '000102030405060708090A0B0C0D0E0F', '4F021DB243BC633D7178183A9FA071E8', 'B4D9ADA9AD7DEDF4E5E738763F69145A', '571B242012FB7AE07FA9BAAC3DF102E0',
    // 256
    '000102030405060708090A0B0C0D0E0F', 'F58C4C04D6E5F1BA779EABFB5F7BFBD6', '9CFC4E967EDB808D679F777BC6702C7D', '39F23369A9D9BACFA530E26304231461'];

    Inputs: [
    // 128
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 192
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 256
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710'];

    Outputs: [
    // 128
    '7649ABAC8119B246CEE98E9B12E9197D8964E0B149C10B7B682E6E39AAEB731C', '5086CB9B507219EE95DB113A917678B255E21D7100B988FFEC32FEEAFAF23538', //
    '73BED6B8E3C1743B7116E69E22229516F6ECCDA327BF8E5EC43718B0039ADCEB', '3FF1CAA1681FAC09120ECA307586E1A78CB82807230E1321D3FAE00D18CC2012',
    // 192
    '4F021DB243BC633D7178183A9FA071E8A647F1643B94812A175A13C8FA2014B2', 'B4D9ADA9AD7DEDF4E5E738763F69145AC81CA99C3A1E883FA8D834316A2275EC', //
    '571B242012FB7AE07FA9BAAC3DF102E0C54FCBC6DB7424CB268F588F83292023', '08B0E27988598881D920A9E64F5615CD612CCD79224B350935D45DD6A98F8176',
    // 256
    'F58C4C04D6E5F1BA779EABFB5F7BFBD6485A5C81519CF378FA36D42B8547EDC0', '9CFC4E967EDB808D679F777BC6702C7D3A3AA5E0213DB1A9901F9036CF5102D2', //
    '39F23369A9D9BACFA530E263042314612F8DA707643C90A6F732B3DE1D3F5CEE', 'B2EB05E2C39BE9FCDA6C19078C6A9D1B3F461796D6B0D6B2E0C2A72B4D80E644'];

    ),

    (Mode: amCtrNoPad; //
    Keys: [
    // 128
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    '2B7E151628AED2A6ABF7158809CF4F3C', //
    // 192
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    '8E73B0F7DA0E6452C810F32B809079E562F8EAD2522C6B7B', //
    // 256
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4', //
    '603DEB1015CA71BE2B73AEF0857D77811F352C073B6108D72D9810A30914DFF4'];

    IVs: [
    // 128
    'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF00', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF01', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF02',
    // 192
    'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF00', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF01', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF02',
    // 256
    'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF00', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF01', 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFF02'];

    Inputs: [
    // 128
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 192
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710',
    // 256
    '6BC1BEE22E409F96E93D7E117393172A', 'AE2D8A571E03AC9C9EB76FAC45AF8E51', '30C81C46A35CE411E5FBC1191A0A52EF', 'F69F2445DF4F9B17AD2B417BE66C3710'];

    Outputs: [
    // 128
    '874D6191B620E3261BEF6864990DB6CE', '9806F66B7970FDFF8617187BB9FFFDFF', '5AE4DF3EDBD5D35E5B4F09020DB03EAB', '1E031DDA2FBE03D1792170A0F3009CEE',
    // 192
    '1ABC932417521CA24F2B0459FE7E6E0B', '090339EC0AA6FAEFD5CCC2C6F4CE8E94', '1E36B26BD1EBC670D1BD1D665620ABF7', '4F78A7F6D29809585A97DAEC58C6B050',
    // 256
    '601EC313775789A5B7A7F504BBF3D228', 'F443E3CA4D62B59ACA84E990CACAF5C5', '2B0930DAA23DE94CE87017BA2D84988D', 'DFC9C58DB67AADA613C2DD08457941A6'];

    ),

    // https://datatracker.ietf.org/doc/html/rfc3962#appendix-B
    (Mode: amCtsNoPad; //
    Keys: [ //
    '636869636b656e207465726979616b69', //
    '636869636b656e207465726979616b69', //
    '636869636b656e207465726979616b69'];

    IVs: [ //
    '00000000000000000000000000000000', //
    '00000000000000000000000000000000', //
    '00000000000000000000000000000000'];

    Inputs: [ //
    '4920776f756c64206c696b652074686520', //
    '4920776f756c64206c696b65207468652047656e6572616c20476175277320', //
    '4920776f756c64206c696b65207468652047656e6572616c20476175277320436869636b656e2c20706c656173652c20616e6420776f6e746f6e20736f75702e'];

    Outputs: [ //
    'C6353568F2BF8CB4D8A580362DA7FF7F97', //
    'FC00783E0EFDB2C1D445D4C8EFF7ED2297687268D6ECCCC0C07B25E25ECFE5', //
    '97687268d6ecccc0c07b25e25ecfe58439312523a78662d5be7fcbcc98ebf5a84807efe836ee89a526730dbc2f7bc8409dad8bbb96c4cdc03bc103e1a194bbd8'];

    )

    );

procedure TTestAes.AesRun(AAes: IAes; const AIn, AOut: TBytes; const AWithMac: Boolean);
var
  LCipher, LDecrypted: TBytes;
begin
  for var I := 0 to 2 do
  begin
    LCipher := AAes.Encrypt(AIn, AWithMac);
    LDecrypted := AAes.Decrypt(LCipher, AWithMac);

    Equ(AIn, LDecrypted);

    if not Assigned(AOut) then
      Continue;

    if AWithMac then
      StartsWith(LCipher, AOut)
    else
      Equ(LCipher, AOut);
  end;
end;

procedure TTestAes.CorrectConst;
begin
  for var LAesMode := low(TAesMode) to high(TAesMode) do
  begin
    Equ(LAesMode, uAes.cAesModes[LAesMode].Mode);
    Equ(LAesMode, cVectors[LAesMode].Mode);
  end;
end;

procedure TTestAes.InEquOut;
var
  LAes: IAes;
  LKey, LIv, LIn: TBytes;
const
  cKeyLengths = [32, 48, 64];
begin
  LAes := FFac.Aes;

  for var LAesMode := low(TAesMode) to high(TAesMode) do
  begin

    for var LKeyLength in cKeyLengths do
    begin

      for var I := 0 to cStrLen do
      begin
        if (LAesMode = amCtsNoPad) and (I < 16) then // Cts require at least 1 block
          Continue;

        LKey.Hex := FRnd.GenStr(LKeyLength, cCharsHex);
        LIv.Hex := FRnd.GenStr(32, cCharsHex);

        LAes.Init(LKey, LIv, LAesMode);
        LKey.Burn;
        LIv.Burn;

        LIn.Hex := FRnd.GenStr(I * 2, cCharsHex);
        if LAesMode = TAesMode.amCbcNoPad then
          LIn.LenSetUpTo(16);

        AesRun(LAes, LIn);
      end;

    end;

  end;
end;

procedure TTestAes.Vectors;
var
  LAes: IAes;
  LKey, LIv, LIn, LOut: TBytes;
begin
  LAes := FFac.Aes;

  for var LAesMode := low(TAesMode) to high(TAesMode) do
  begin

    for var I := low(cVectors[LAesMode].Keys) to high(cVectors[LAesMode].Keys) do
    begin
      LKey.Hex := cVectors[LAesMode].Keys[I];
      LIv.Hex := cVectors[LAesMode].IVs[I];
      LIn.Hex := cVectors[LAesMode].Inputs[I];
      LOut.Hex := cVectors[LAesMode].Outputs[I];

      LAes.Init(LKey, LIv, LAesMode);
      LKey.Burn;
      LIv.Burn;
      AesRun(LAes, LIn, LOut);
    end;

  end;
end;

initialization

TTest.Add(TTestAes.Create);

end.
